const axios = require("axios");

module.exports = {
  name: "tempmailv2",
  description: "generate random email and fetch inbox",
  author: "developer",
  async execute(senderId, args, pageAccessToken, sendMessage) {

    if (!args[0]) {
      return sendMessage(senderId, { text: "Please provide a valid command: 'gen' or 'inbox {email}'." }, pageAccessToken);
    }

    if (args[0] === "create") {
      try {
        const apiUrl = "https://markdevs69v2-679r.onrender.com/new/api/gen";
        const response = await axios.get(apiUrl);
        const email = response.data.email;

        sendMessage(senderId, { text: `✅ Here is your generated email:\n\n✉️ Email: ${email}` }, pageAccessToken);
      } catch (error) {
        console.error("Error generating email:", error);
        sendMessage(senderId, { text: "An error occurred while generating the email." }, pageAccessToken);
      }
    } else if (args[0].toLowerCase() === "inbox" && args.length === 2) {
      const email = args[1];
      try {
        const apiUrl = `https://markdevs69v2-679r.onrender.com/new/api/getmessage/${email}`;
        const response = await axios.get(apiUrl);
        const messages = response.data;

        if (messages.length > 0) {
          const inboxFrom = messages[0].from;
          const inboxSubject = messages[0].subject;
          const inboxBody = messages[0].body;
          const inboxDate = messages[0].date;

          sendMessage(
            senderId,
            { text: `•=====[Inbox]=====•\n👤 From: ${inboxFrom}\n🔖 Subject: ${inboxSubject}\n📅 Date: ${inboxDate}\n\n💌 Message: ${inboxBody}` },
            pageAccessToken
          );
        } else {
          sendMessage(senderId, { text: "🔴 No messages found in the inbox for this email." }, pageAccessToken);
        }
      } catch (error) {
        console.error("Error fetching inbox:", error);
        sendMessage(senderId, { text: "An error occurred while fetching the inbox." }, pageAccessToken);
      }
    } else {
      sendMessage(senderId, { text: "Please provide a valid command: 'gen' or 'inbox {email}'." }, pageAccessToken);
    }
  }
};



const axios = require("axios");

module.exports = {
  name: "tempmailv2",
  description: "generate random email and fetch inbox",
  author: "developer",
  async execute(senderId, args, pageAccessToken, sendMessage) {

    if (!args[0]) {
      return sendMessage(senderId, { text: "Please provide a valid command: 'create' or 'inbox {email}'." }, pageAccessToken);
    }

    if (args[0] === "create") {
      try {
        const apiUrl = "https://c-v1.onrender.com/tempmail/gen";
        const response = await axios.get(apiUrl, { timeout: 2000 });
        const email = response.data.email;

        sendMessage(senderId, { text: `✅ Here is your generated email:\n\n✉️ Email: ${email}` }, pageAccessToken);
      } catch (error) {
        console.error("Error generating email:", error);
        sendMessage(senderId, { text: "An error occurred while generating the email." }, pageAccessToken);
      }
    } else if (args[0].toLowerCase() === "check" && args.length === 2) {
      const email = args[1];
      try {
        const apiUrl = `${encodeURIComponent(email)}`;
        const response = await axios.get(apiUrl, { timeout: 2000 });
        const messages = response.data;

        if (messages.length > 0) {
          const messageList = messages.map((msg, index) => 
            `#${index + 1} From: ${msg.from}\nSubject: ${msg.subject}\nDate: ${msg.date}`
          ).join('\n\n');

          sendMessage(
            senderId,
            { text: `📬 Checked Inbox for ${email}:\n\n${messageList}` },
            pageAccessToken
          );
        } else {
          sendMessage(senderId, { text: "🔴 No messages found in the inbox for this email." }, pageAccessToken);
        }
      } catch (error) {
        console.error("Error fetching inbox:", error);
        sendMessage(senderId, { text: "An error occurred while fetching the inbox." }, pageAccessToken);
      }
    } else {
      sendMessage(senderId, { text: "Please provide a valid command: 'create' or 'inbox {email}'." }, pageAccessToken);
    }
  }
};

const axios = require('axios');

const EMAIL_API_URL = "https://apis-markdevs69v2.onrender.com/new/api/gen";
const INBOX_API_URL = "https://c-v1.onrender.com/tempmail/inbox?email=";

module.exports = {
  name: 'tempmail',
  description: 'generate temporary email or check inbox',
  author: 'developer',
  async execute(senderId, args, pageAccessToken, sendMessage) {
    try {
      if (args.length === 0) {
        return sendMessage(senderId, { text: "tempmail create and tempmail inbox <email>" }, pageAccessToken);
      }

      const command = args[0].toLowerCase();

      if (command === 'create') {
        let email;
        try {
          // Generate a random temporary email
          const response = await axios.get(EMAIL_API_URL);
          email = response.data.email;

          if (!email) {
            throw new Error("Failed to generate email");
          }
        } catch (error) {
          console.error("❌ | Failed to generate email", error.message);
          return sendMessage(senderId, { text: `❌ | Failed to generate email. Error: ${error.message}` }, pageAccessToken);
        }
        return sendMessage(senderId, { text: `generated email ✉️: ${email}` }, pageAccessToken);
      } else if (command === 'inbox' && args.length === 2) {
        const email = args[1];
        if (!email) {
          return sendMessage(senderId, { text: "❌ | Please provide an email address to check the inbox." }, pageAccessToken);
        }

        let inboxMessages;
        try {
          // Retrieve messages from the specified email
          const inboxResponse = await axios.get(`${INBOX_API_URL}${email}`);
          inboxMessages = inboxResponse.data;

          if (!Array.isArray(inboxMessages)) {
            throw new Error("Unexpected response format");
          }
        } catch (error) {
          console.error(`❌ | Failed to retrieve inbox messages`, error.message);
          return sendMessage(senderId, { text: `❌ | Failed to retrieve inbox messages. Error: ${error.message}` }, pageAccessToken);
        }

        if (inboxMessages.length === 0) {
          return sendMessage(senderId, { text: "❌ | No messages found in the inbox." }, pageAccessToken);
        }

        // Get the most recent message
        const latestMessage = inboxMessages[0];
        const { date, from, subject } = latestMessage;

        const formattedMessage = `📧 From: ${from}\n📩 Subject: ${subject}\n📅 Date: ${date}\n━━━━━━━━━━━━━━━━`;
        return sendMessage(senderId, { text: `━━━━━━━━━━━━━━━━\n📬 Inbox messages for ${email}:\n${formattedMessage}` }, pageAccessToken);
      } else {
        return sendMessage(senderId, { text: `❌ | Invalid command. Use 'tempmail create (generate email)\ntempmail inbox <email>. (to inbox code)` }, pageAccessToken);
      }
    } catch (error) {
      console.error("Unexpected error:", error.message);
      return sendMessage(senderId, { text: `❌ | An unexpected error occurred: ${error.message}` }, pageAccessToken);
    }
  }
};